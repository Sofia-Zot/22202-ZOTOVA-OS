#include <stdio.h>
#include <sys/mman.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/wait.h>
#include <errno.h>

#define PAGE_SIZE 4096

void writer(unsigned int *memory, int num) {
    unsigned int curr_num = 0;

    while (true) {
        for (int i = 0; i < num; i++) {
            memory[i] = curr_num++;
        }
    }
}

void reader(unsigned int *memory, int num) {
    unsigned int prev_read = memory[0];
    unsigned int curr_read;

    while (true) {
        for (int i = 0; i < num; i++) {
            curr_read = memory[i];
            if (prev_read > curr_read) {
                printf("Failure occurred: %u %u\n", prev_read, curr_read);
            }
            prev_read = curr_read;
        }
    }
}

int main() {
    unsigned int *memory = mmap(NULL, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    if (memory == MAP_FAILED) {
        perror("mmap");
        return 1;
    }
    int num = PAGE_SIZE / sizeof(unsigned int);
    int pid = fork();

    if (pid == -1) {
        perror("fork");
        return 1;
    }

    if (pid == 0) {
        // Child process - reader
        reader(memory, num);
    } else {
        // Parent process - writer
        writer(memory, num);
        wait(NULL); // Wait for child process to finish
        munmap(memory, PAGE_SIZE);
    }
    return 0;
}