#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <signal.h>
#include <errno.h>

#define BUFF_SIZE 64
#define PORT 25565

int main() {
    printf("Pid: %d\n", getpid());
    int sfd;
    char buffer[BUFF_SIZE];
    struct sockaddr_in srv_sockaddr;

    
    sfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sfd == -1) {
        printf("Ошибка создания сокета: %s\n", strerror(errno));
        exit(1);
    }

    
    memset(&srv_sockaddr, 0, sizeof(srv_sockaddr));
    srv_sockaddr.sin_family = AF_INET;
    srv_sockaddr.sin_port = htons(PORT); // Преобразование порта в сетевой формат
    srv_sockaddr.sin_addr.s_addr = inet_addr("127.0.0.1"); // IP-адрес сервера (localhost)

 
    if (connect(sfd, (struct sockaddr*)&srv_sockaddr, sizeof(srv_sockaddr)) == -1) {
        printf("Ошибка подключения: %s\n", strerror(errno));
        close(sfd);
        exit(1);
    }

    int n;
    const char *hello = "Привет от клиента!";
    while (1) {
        printf("Отправка сообщения клиентом...\n");
        sleep(1);

        
        n = send(sfd, hello, strlen(hello), 0);
        if (n == -1) {
            printf("Ошибка отправки: %s\n", strerror(errno));
            close(sfd);
            exit(1);
        }

        printf("Сообщение отправлено: %s\n", hello);

        
        n = recv(sfd, buffer, BUFF_SIZE, 0);
        if (n == -1) {
            printf("Ошибка получения ответа: %s\n", strerror(errno));
            close(sfd);
            exit(1);
        }
        buffer[n] = '\0';

        printf("Получено сообщение: '%s'.\n\n", buffer);
        sleep(5);
    }
    close(sfd);
    return 0;
}